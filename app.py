import streamlit as st
import math
import matplotlib.pyplot as plt
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω",
    page_icon="üî•",
    layout="wide"
)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å, –í—Ç/–º¬∑–ö) ---
MATERIALS = {
    "–∫–∏—Ä–ø–∏—á": 0.81,
    "–≥–∞–∑–æ–±–ª–æ–∫": 0.12,
    "–¥–µ—Ä–µ–≤–æ": 0.18,
    "—Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å": 0.04,
    "–∫–µ—Ä–∞–º–∑–∏—Ç –±–ª–æ–∫": 0.43
}

# --- –ú–æ–¥–µ–ª–∏ "–ú—É—Å—Å–æ–Ω" ---
MUSSON_MODELS = {
    "–ú—É—Å—Å–æ–Ω 300": {"volume_l": 77, "price": 45000},
    "–ú—É—Å—Å–æ–Ω 600": {"volume_l": 125, "price": 65000},
    "–ú—É—Å—Å–æ–Ω 1000": {"volume_l": 200, "price": 85000},
    "–ú—É—Å—Å–æ–Ω 1500": {"volume_l": 311, "price": 110000},
    "–ú—É—Å—Å–æ–Ω 2000": {"volume_l": 467, "price": 135000},
}

# --- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ —Ç–µ–ø–ª–æ—Ç–≤–æ—Ä–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥—Ä–µ–≤–µ—Å–∏–Ω—ã ---
WOOD_TYPES = {
    "—Ö–≤–æ–π–Ω—ã–µ": {"density": 350, "q": 17},
    "–±–µ—Ä—ë–∑–∞": {"density": 450, "q": 18},
    "–¥—É–±": {"density": 550, "q": 19.5},
    "–ª–∏–ø–∞": {"density": 500, "q": 17.5},
    "–æ—Ç—Ö–æ–¥—ã": {"density": 700, "q": 12}  # —Å—Ä–µ–¥–Ω–∏–π –¥–ª—è –õ–î–°–ü, –î–°–ü, —Ñ–∞–Ω–µ—Ä—ã
}

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ ---

def calc_heat_loss(area_m2, height_m, wall_thickness_m, material, t_in, t_out, windows_m2=0, doors_m2=0, roof_insulation=True):
    volume_m3 = area_m2 * height_m
    lambda_wall = MATERIALS[material]
    r_wall = wall_thickness_m / lambda_wall
    wall_area = 2 * height_m * (math.sqrt(area_m2) * 4) - windows_m2 - doors_m2
    q_walls = wall_area * (t_in - t_out) / r_wall
    q_windows = windows_m2 * (t_in - t_out) / 0.4
    q_doors = doors_m2 * (t_in - t_out) / 0.6
    roof_r = 0.2 if not roof_insulation else 1.0
    q_roof = area_m2 * (t_in - t_out) / roof_r
    q_vent = 0.3 * volume_m3 * (t_in - t_out)
    total_w = q_walls + q_windows + q_doors + q_roof + q_vent
    return total_w / 1000


def musson_power(volume_l, fill_fraction, wood_type, efficiency, burn_hours):
    vol_m3 = volume_l / 1000
    filled_vol_m3 = vol_m3 * fill_fraction
    m_wood = filled_vol_m3 * WOOD_TYPES[wood_type]["density"]
    q_fuel = m_wood * WOOD_TYPES[wood_type]["q"]
    q_kwh = q_fuel / 3.6
    useful_kwh = q_kwh * efficiency
    p_kw = useful_kwh / burn_hours
    return useful_kwh, p_kw, m_wood


def calculate_fuel_consumption(daily_heat_loss_kwh, wood_energy_kwh_per_kg):
    return daily_heat_loss_kwh / wood_energy_kwh_per_kg

# --- Streamlit UI ---
st.title("üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–π –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω")

st.sidebar.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è")
col1, col2 = st.sidebar.columns(2)
with col1:
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", 20, 500, 100)
with col2:
    height_m = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", 2.0, 5.0, 2.5)

material = st.sidebar.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (—Å–º)", 10, 100, 40) / 100

st.sidebar.header("ü™ü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
windows_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", 0, 50, 5)
doors_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", 0, 10, 2)
roof_insulation = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω–∞—è –∫—Ä—ã—à–∞", value=True)

st.sidebar.header("üå°Ô∏è –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è")
col1, col2 = st.sidebar.columns(2)
with col1:
    t_in = st.slider("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 15, 30, 22)
with col2:
    t_out = st.slider("–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -50, 10, -20)

st.sidebar.header("ü™µ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ø–ª–∏–≤–∞")
wood_type = st.sidebar.selectbox("–ü–æ—Ä–æ–¥–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã", list(WOOD_TYPES.keys()))
wood_price_m3 = st.sidebar.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä–µ–≤–µ—Å–∏–Ω—ã (—Ä—É–±/–º¬≥)", 1000, 50000, 3500)
fill_fraction = st.sidebar.slider("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ø–∫–∏ (%)", 50, 100, 85) / 100
efficiency = st.sidebar.slider("–ö–ü–î –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–≥–æ –∫–æ—Ç–ª–∞ (%)", 70, 95, 88) / 100
burn_hours = st.sidebar.selectbox("–í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ (—á)", [2, 4, 6, 8, 10], index=2)
working_day_hours = st.sidebar.selectbox("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–µ—á–∏ (—á/–¥–µ–Ω—å)", [6, 8, 10, 12, 14, 16], index=2)

# --- –†–∞—Å—á—ë—Ç ---
heat_loss_kw = calc_heat_loss(area_m2, height_m, wall_thickness, material, t_in, t_out, windows_m2, doors_m2, roof_insulation)
volume_m3 = area_m2 * height_m

st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞")

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ –∑–¥–∞–Ω–∏—è", f"{heat_loss_kw:.1f} –∫–í—Ç")
with col2:
    st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å", f"{heat_loss_kw * 1.2:.1f} –∫–í—Ç")
with col3:
    st.metric("–û–±—ä—ë–º –ø–æ–º–µ—â–µ–Ω–∏—è", f"{volume_m3:.0f} –º¬≥")

st.subheader("üî• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ú—É—Å—Å–æ–Ω")
results = []
for model, params in MUSSON_MODELS.items():
    useful_kwh, p_kw, m_wood = musson_power(params["volume_l"], fill_fraction, wood_type, efficiency, burn_hours)
    results.append({
        "model": model,
        "power": p_kw,
        "energy": useful_kwh,
        "wood_per_load": m_wood,
        "volume_l": params["volume_l"],
        "price": params["price"]
    })

df = pd.DataFrame(results)
df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"] = df["power"] >= heat_loss_kw * 1.2
df["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"].map({True: "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", False: "‚ùå –ú–∞–ª–æ–º–æ—â–Ω–∞"})
display_df = df[["model", "power", "energy", "wood_per_load", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]].copy()
display_df.columns = ["–ú–æ–¥–µ–ª—å", "–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)", "–≠–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)", "–î—Ä–æ–≤ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]
display_df["–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)"] = display_df["–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)"].round(1)
display_df["–≠–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)"] = display_df["–≠–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)"].round(0)
display_df["–î—Ä–æ–≤ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)"] = display_df["–î—Ä–æ–≤ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)"].round(1)
st.dataframe(display_df, use_container_width=True)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
models = [r["model"] for r in results]
powers = [r["power"] for r in results]
colors = ['green' if p >= heat_loss_kw * 1.2 else 'red' for p in powers]
ax1.bar(models, powers, color=colors, alpha=0.7)
ax1.axhline(y=heat_loss_kw * 1.2, color="blue", linestyle="--", label=f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {heat_loss_kw * 1.2:.1f} –∫–í—Ç")
ax1.set_ylabel("–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç")
ax1.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
ax1.legend()
ax1.tick_params(axis='x', rotation=45)
energies = [r["energy"] for r in results]
ax2.bar(models, energies, color='orange', alpha=0.7)
ax2.set_ylabel("–≠–Ω–µ—Ä–≥–∏—è –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É, –∫–í—Ç¬∑—á")
ax2.set_title("–≠–Ω–µ—Ä–≥–∏—è –æ—Ç –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ –¥—Ä–æ–≤")
ax2.tick_params(axis='x', rotation=45)
plt.tight_layout()
st.pyplot(fig)

st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
suitable_models = [r for r in results if r["power"] >= heat_loss_kw * 1.2]
if suitable_models:
    best_model = min(suitable_models, key=lambda x: x["price"])
    st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best_model['model']}**")
    daily_heat_kwh = heat_loss_kw * working_day_hours
    wood_energy_kwh_kg = (WOOD_TYPES[wood_type]["q"] / 3.6) * efficiency
    daily_wood_kg = calculate_fuel_consumption(daily_heat_kwh, wood_energy_kwh_kg)
    st.write(f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å ({working_day_hours} —á): {daily_wood_kg:.1f} –∫–≥")
else:
    st.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")