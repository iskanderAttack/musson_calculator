import streamlit as st
import math
import matplotlib.pyplot as plt
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω", page_icon="üî•", layout="wide")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
MATERIALS = {
    "–∫–∏—Ä–ø–∏—á": 0.81,
    "–≥–∞–∑–æ–±–ª–æ–∫": 0.12,
    "–¥–µ—Ä–µ–≤–æ": 0.18,
    "—Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å": 0.04,
    "–∫–µ—Ä–∞–º–∑–∏—Ç –±–ª–æ–∫": 0.43
}

# --- –ú–æ–¥–µ–ª–∏ "–ú—É—Å—Å–æ–Ω" ---
MUSSON_MODELS = {
    "–ú—É—Å—Å–æ–Ω 300": {"volume_l": 77, "price": 45000},
    "–ú—É—Å—Å–æ–Ω 600": {"volume_l": 125, "price": 55000},
    "–ú—É—Å—Å–æ–Ω 1000": {"volume_l": 200, "price": 75000},
    "–ú—É—Å—Å–æ–Ω 1500": {"volume_l": 311, "price": 95000},
    "–ú—É—Å—Å–æ–Ω 2000": {"volume_l": 467, "price": 120000},
}

# --- –î—Ä–µ–≤–µ—Å–∏–Ω–∞ –∏ –æ—Ç—Ö–æ–¥—ã ---
WOOD_TYPES = {
    "—Ö–≤–æ–π–Ω—ã–µ": {"density": 350, "q": 17, "fill_coeff": 0.8, "max_burn_hours": 10},
    "–±–µ—Ä—ë–∑–∞": {"density": 450, "q": 18, "fill_coeff": 0.8, "max_burn_hours": 10},
    "–¥—É–±": {"density": 550, "q": 19.5, "fill_coeff": 0.8, "max_burn_hours": 10},
    "–ª–∏–ø–∞": {"density": 500, "q": 17.5, "fill_coeff": 0.8, "max_burn_hours": 8},
    "–æ—Ç—Ö–æ–¥—ã (–õ–î–°–ü, –î–°–ü, —Ñ–∞–Ω–µ—Ä–∞ –∏ –¥—Ä.)": {"density": 700, "q": 12, "fill_coeff": 0.7, "max_burn_hours": 6},
}

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ ---
def calc_heat_loss(area_m2, height_m, wall_thickness_m, material, t_in, t_out, windows_m2=0, doors_m2=0, roof_insulation=True):
    volume_m3 = area_m2 * height_m
    lambda_wall = MATERIALS[material]
    r_wall = wall_thickness_m / lambda_wall
    wall_area = 2 * height_m * (math.sqrt(area_m2) * 4) - windows_m2 - doors_m2
    q_walls = wall_area * (t_in - t_out) / r_wall
    q_windows = windows_m2 * (t_in - t_out) / 0.4
    q_doors = doors_m2 * (t_in - t_out) / 0.6
    roof_r = 0.2 if not roof_insulation else 1.0
    q_roof = area_m2 * (t_in - t_out) / roof_r
    q_vent = 0.3 * volume_m3 * (t_in - t_out)
    total_w = q_walls + q_windows + q_doors + q_roof + q_vent
    return total_w / 1000

def musson_power(volume_l, fill_fraction, wood_type, efficiency, burn_hours):
    vol_m3 = volume_l / 1000
    filled_vol_m3 = vol_m3 * fill_fraction * WOOD_TYPES[wood_type]["fill_coeff"]
    m_wood = filled_vol_m3 * WOOD_TYPES[wood_type]["density"]
    q_fuel = m_wood * WOOD_TYPES[wood_type]["q"]
    q_kwh = q_fuel / 3.6
    useful_kwh = q_kwh * efficiency
    p_kw = useful_kwh / burn_hours
    return useful_kwh, p_kw, m_wood

# --- Streamlit UI ---
st.title("üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–π –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è ---
st.sidebar.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è")
col1, col2 = st.sidebar.columns(2)
with col1:
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", 20, 500, 100)
with col2:
    height_m = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", 2.0, 5.0, 2.5)

material = st.sidebar.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (—Å–º)", 10, 100, 40) / 100

# --- –î–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
st.sidebar.header("ü™ü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
windows_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", 0, 50, 5)
doors_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", 0, 10, 2)
roof_insulation = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω–∞—è –∫—Ä—ã—à–∞", value=True)

# --- –ö–ª–∏–º–∞—Ç ---
st.sidebar.header("üå°Ô∏è –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è")
col1, col2 = st.sidebar.columns(2)
with col1:
    t_in = st.slider("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 15, 30, 22)
with col2:
    t_out = st.slider("–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -50, 10, -20)

# --- –¢–æ–ø–ª–∏–≤–æ ---
st.sidebar.header("ü™µ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ø–ª–∏–≤–∞")
wood_type = st.sidebar.selectbox("–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", list(WOOD_TYPES.keys()))
wood_price_m3 = st.sidebar.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä–µ–≤–µ—Å–∏–Ω—ã (—Ä—É–±/–º¬≥)", 1000, 50000, 3500)
fill_fraction = st.sidebar.slider("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ø–∫–∏ (%)", 50, 100, 85) / 100
efficiency = st.sidebar.slider("–ö–ü–î –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–≥–æ –∫–æ—Ç–ª–∞ (%)", 70, 95, 88) / 100
burn_hours = st.sidebar.selectbox("–í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ (—á)", [2,4,6,8,10], index=2)
working_day_hours = st.sidebar.selectbox("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (—á)", [6,8,10,12,14,16], index=2)

# --- –†–∞—Å—á—ë—Ç ---
heat_loss_kw = calc_heat_loss(area_m2, height_m, wall_thickness, material, t_in, t_out, windows_m2, doors_m2, roof_insulation)

# --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ---
results = []
for model, params in MUSSON_MODELS.items():
    useful_kwh, p_kw, m_wood = musson_power(params["volume_l"], fill_fraction, wood_type, efficiency, burn_hours)
    results.append({"model": model, "power": p_kw, "energy": useful_kwh, "wood_per_load": m_wood, "volume_l": params["volume_l"], "price": params["price"]})

# --- –¢–∞–±–ª–∏—Ü–∞ ---
df = pd.DataFrame(results)
df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"] = df["power"] >= heat_loss_kw*1.2
df["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"].map({True: "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", False: "‚ùå –ú–∞–ª–æ–º–æ—â–Ω–∞"})
display_df = df[["model","power","energy","wood_per_load","–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]].copy()
display_df.columns = ["–ú–æ–¥–µ–ª—å","–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)","–≠–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)","–î—Ä–æ–≤ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)","–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]
display_df = display_df.round({"–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)":1,"–≠–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)":0,"–î—Ä–æ–≤ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)":1})
st.dataframe(display_df, use_container_width=True)

# --- –ì—Ä–∞—Ñ–∏–∫–∏ ---
fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,5))
models = [r['model'] for r in results]
powers = [r['power'] for r in results]
colors = ['green' if p >= heat_loss_kw*1.2 else 'red' for p in powers]
ax1.bar(models, powers, color=colors, alpha=0.7)
ax1.axhline(y=heat_loss_kw*1.2, color='blue', linestyle='--', label=f'–¢—Ä–µ–±—É–µ—Ç—Å—è: {heat_loss_kw*1.2:.1f} –∫–í—Ç')
ax1.set_ylabel('–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç')
ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π')
ax1.legend()
ax1.tick_params(axis='x', rotation=45)
energies = [r['energy'] for r in results]
ax2.bar(models, energies, color='orange', alpha=0.7)
ax2.set_ylabel('–≠–Ω–µ—Ä–≥–∏—è –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É, –∫–í—Ç¬∑—á')
ax2.set_title('–≠–Ω–µ—Ä–≥–∏—è –æ—Ç –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏')
ax2.tick_params(axis='x', rotation=45)
plt.tight_layout()
st.pyplot(fig)

# --- –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ ---
suitable_models = [r for r in results if r['power'] >= heat_loss_kw * 1.2]
if suitable_models:
    best_model = min(suitable_models, key=lambda x: x['price'])
    fill_coeff = WOOD_TYPES[wood_type]['fill_coeff']
    max_hours = WOOD_TYPES[wood_type]['max_burn_hours']

    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å")
    st.success(f"**{best_model['model']}** ‚Äî {best_model['price']:,} —Ä—É–±.".replace(',', ' '))

    st.write("**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:**")
    st.write(f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {best_model['power']:.1f} –∫–í—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è {heat_loss_kw*1.2:.1f} –∫–í—Ç)")
    st.write(f"‚Ä¢ –í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏: –¥–æ {min(burn_hours, max_hours)} —á–∞—Å–æ–≤")
    st.write(f"‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É: {best_model['wood_per_load']:.1f} –∫–≥")

    # --- –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ ---
    num_loads = math.ceil(working_day_hours / min(burn_hours, max_hours))
    daily_consumption = best_model['wood_per_load'] * num_loads
    monthly_consumption = daily_consumption * 22  # 22 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
    cost_per_kg = wood_price_m3 / (WOOD_TYPES[wood_type]["density"] * 1)  # —Ä—É–±/–∫–≥
    daily_cost = daily_consumption * cost_per_kg
    monthly_cost = monthly_consumption * cost_per_kg

    st.write("\n**–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å:**")
    st.write(f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {working_day_hours} —á")
    st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–ª–∞–¥–æ–∫: {num_loads}")
    st.write(f"‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –¥–µ–Ω—å: {daily_consumption:.1f} –∫–≥")
    st.write(f"‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –º–µ—Å—è—Ü (22 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è): {monthly_consumption:.0f} –∫–≥")

    st.write("\n**–≠–∫–æ–Ω–æ–º–∏–∫–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è:**")
    st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å: {daily_cost:.0f} —Ä—É–±.")
    st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü: {monthly_cost:.0f} —Ä—É–±.")

else:
    st.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

# --- –°–æ–≤–µ—Ç—ã ---
with st.expander("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"):
    st.write("""
    1. **–ö–∞—á–µ—Å—Ç–≤–æ –¥—Ä–æ–≤**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—Ö–∏–µ –¥—Ä–æ–≤–∞ (–≤–ª–∞–∂–Ω–æ—Å—Ç—å –º–µ–Ω–µ–µ 20%)
    2. **–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**: –ù–µ –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ç–æ–ø–∫—É –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 80%
    3. **–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ**: –ß–∏—Å—Ç–∏—Ç–µ –¥—ã–º–æ—Ö–æ–¥ –∏ —Ç–æ–ø–∫—É —Ä–∞–∑ –≤ —Å–µ–∑–æ–Ω
    4. **–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º**: –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    5. **–£—Ç–µ–ø–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è**: –£—Ç–µ–ø–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω –∏ –æ–∫–æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∑–∏—Ç —Ä–∞—Å—Ö–æ–¥ –¥—Ä–æ–≤
    """)
